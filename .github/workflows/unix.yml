name: Unix

on:
  push:
    branches:
      - main
      - actions
  pull_request:

env:
  BUILD_TYPE: Release

jobs:
  build:

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Updated macOS runners and compilers.
          - {
            name: "macOS Latest AppleClang",
            os: macos-latest, # Recommend macos-latest (currently macos-14).
            cxx: "clang++"
          }
          - {
            name: "macOS Latest GCC",
            os: macos-latest, # Recommend macos-latest (currently macos-14).
            cxx: "g++-13"     # Or whatever the latest stable GCC version from Homebrew is.
          }
          # Updated Ubuntu runners and compilers.
          - {
            name: "Ubuntu Latest Clang",
            os: ubuntu-latest, # Recommend ubuntu-latest (currently ubuntu-22.04).
            cxx: "clang++"     # Will usually point to the default clang version.
          }
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest, # Recommend ubuntu-latest (currently ubuntu-22.04).
            cxx: "g++"         # Will usually point to the default g++ version.
          }

    steps:
    - uses: actions/checkout@v4 # Update to v4 for latest features and security.

    - name: Set NPROC (macOS)
      if: runner.os == 'macOS'
      run: echo "NPROC=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV

    - name: Set NPROC (Linux)
      if: runner.os == 'Linux'
      run: echo "NPROC=$(nproc)" >> $GITHUB_ENV

    - name: Set Up macOS Dependencies
      if: runner.os == 'macOS'
      run: |
        # Use Homebrew to install GCC if needed, otherwise clang++ is usually default
        # If you need a specific GCC, check 'brew search gcc' for available versions
        # brew install gcc # This installs the latest GCC from Homebrew
        # No specific action needed for clang on macOS, it's usually pre-installed

    - name: Set Up Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        # Update apt cache first
        sudo apt update
        # Install CMake, pkg-config, and default clang/g++ if not already present
        # Or install specific versions if needed, e.g., clang-14, g++-12
        sudo apt install -y cmake pkg-config clang g++

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_COMPILER=${{matrix.config.cxx}}

    - name: Build All
      working-directory: ${{runner.workspace}}/build
      # Use the NPROC environment variable set in earlier steps.
      run: make -j $NPROC

    - name: Test
      working-directory: ${{runner.workspace}}/build
      # Use the NPROC environment variable set in earlier steps.
      run: ctest -j $NPROC